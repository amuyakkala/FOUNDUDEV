#!/usr/bin/env node

require("dotenv").config();
const { program } = require("commander");
const packageJson = require("../package.json");
const loginCommand = require("../lib/commands/login");
const newCommand = require("../lib/commands/new");
const runCommand = require("../lib/commands/run");
const deployCommand = require("../lib/commands/deploy");
const schedulesCommand = require("../lib/commands/schedules");
const helpCommand = require("../lib/commands/help");
const unknownCommand = require("../lib/commands/unknown");
const ragCommand = require("../lib/commands/rag");

const {
  startTelemetrySession,
  recordTelemetryEvent,
  endTelemetrySession,
} = require("../lib/utils/telemetry");
const { checkForUpdates } = require("../lib/utils/updates-checker");

// Load environment variables

// CLI initialization
program
  .name("th")
  .description("Toolhouse CLI for managing agents")
  .hook("preAction", async (command, { parent }) => {
    startTelemetrySession();
    recordTelemetryEvent({
      command: parent.args[0],
      event: "start",
      args: parent.rawArgs,
      timestamp: new Date().toISOString(),
    });
  })
  .hook("postAction", async (command, { parent }) => {
    recordTelemetryEvent({
      command: parent.args[0],
      event: "end",
      args: parent.rawArgs,
      timestamp: new Date().toISOString(),
    });
    endTelemetrySession();
    await checkForUpdates();
  })
  .version(packageJson.version);
// add a handler for a missing command

// Register commands
unknownCommand(program);
loginCommand(program);
newCommand(program);
runCommand(program);
deployCommand(program);
schedulesCommand(program);
helpCommand(program);
ragCommand(program);

// Parse command line arguments
program.parse(process.argv);

// If no command is provided, show help
if (!process.argv.slice(2).length) {
  program.outputHelp();
}
