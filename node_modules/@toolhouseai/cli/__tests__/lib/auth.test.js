const fs = require('fs');
const { getAuthToken, getApiKey, saveAuthToken, saveApiKey, isAuthenticated } = require('../../lib/auth');
const { getAuthConfig, saveToConfig } = require('../../lib/config');

jest.mock('../../lib/config');

describe('Auth Module', () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });

  describe('getAuthToken', () => {
    it('should return auth token from config', () => {
      getAuthConfig.mockReturnValue({ TOOLHOUSE_AUTH_TOKEN: 'test-token' });
      expect(getAuthToken()).toBe('test-token');
    });

    it('should return null if no auth token exists', () => {
      getAuthConfig.mockReturnValue({});
      expect(getAuthToken()).toBeNull();
    });
  });

  describe('getApiKey', () => {
    it('should return API key from config', () => {
      getAuthConfig.mockReturnValue({ TOOLHOUSE_API_KEY: 'test-key' });
      expect(getApiKey()).toBe('test-key');
    });

    it('should return null if no API key exists', () => {
      getAuthConfig.mockReturnValue({});
      expect(getApiKey()).toBeNull();
    });
  });

  describe('saveAuthToken', () => {
    it('should save auth token to config', () => {
      saveAuthToken('new-token');
      expect(saveToConfig).toHaveBeenCalledWith({ TOOLHOUSE_AUTH_TOKEN: 'new-token' });
    });
  });

  describe('saveApiKey', () => {
    it('should save API key to config', () => {
      saveApiKey('new-key');
      expect(saveToConfig).toHaveBeenCalledWith({ TOOLHOUSE_API_KEY: 'new-key' });
    });
  });

  describe('isAuthenticated', () => {
    it('should return true when both token and API key exist', () => {
      getAuthConfig.mockReturnValue({
        TOOLHOUSE_AUTH_TOKEN: 'test-token',
        TOOLHOUSE_API_KEY: 'test-key'
      });
      expect(isAuthenticated()).toBe(true);
    });

    it('should return false when token is missing', () => {
      getAuthConfig.mockReturnValue({
        TOOLHOUSE_API_KEY: 'test-key'
      });
      expect(isAuthenticated()).toBe(false);
    });

    it('should return false when API key is missing', () => {
      getAuthConfig.mockReturnValue({
        TOOLHOUSE_AUTH_TOKEN: 'test-token'
      });
      expect(isAuthenticated()).toBe(false);
    });
  });
});