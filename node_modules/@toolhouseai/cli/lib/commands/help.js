const chalk = require('chalk');
const { createBox } = require('../utils/display');

const commandHelp = {
  'login': {
    description: 'Authenticate with Toolhouse',
    usage: 'th login',
    options: [],
    examples: [
      'th login'
    ],
    details: `Initiates the login process for Toolhouse CLI. Opens your default browser 
to complete authentication. After successful login, your credentials will be saved 
locally for future use.`
  },
  'new': {
    description: 'Create a new agent file',
    usage: 'th new [agent_name]',
    options: [],
    examples: [
      'th new',
      'th new my-agent'
    ],
    details: `Creates a new agent configuration file in YAML format. If no name is provided, 
generates a random name using a combination of words and a unique identifier. 
The generated file includes a basic template with all required fields and examples.

The created file will include:
- A unique agent ID
- Default title and prompt
- System prompt configuration
- Variable placeholders
- Bundle configuration
- Privacy settings`
  },
  'run': {
    description: 'Run an agent locally',
    usage: 'th run [agent_name]',
    options: [],
    examples: [
      'th run',
      'th run my-agent.yaml'
    ],
    details: `Executes an agent locally using the configuration from its YAML file. 
If no agent name is provided, runs all agents in the current directory. The output 
is streamed in real-time to your terminal.

Requires authentication with 'th login' before use.`
  },
  'deploy': {
    description: 'Deploy an agent to Toolhouse',
    usage: 'th deploy [agent_name]',
    options: [],
    examples: [
      'th deploy',
      'th deploy my-agent.yaml'
    ],
    details: `Deploys an agent to the Toolhouse platform. If no agent name is provided, 
deploys all agents in the current directory. Creates a public URL where your agent can 
be accessed.

After successful deployment, provides:
- Public access URL
- Deployment status
- Region information
- Instance type
- Deployment ID

Requires authentication with 'th login' before use.`
  },
  'schedules': {
    description: 'View agent schedules',
    usage: 'th schedules [agent_name]',
    options: [],
    examples: [
      'th schedules',
      'th schedules agent.yaml'
    ],
    details: `Views the current schedule for an agent. If no agent name is provided, 
it will use the only YAML file in the current directory. If multiple YAML files exist, 
you must specify which agent file to use.

Requires authentication with 'th login' before use.`
  },
  'schedules:create': {
    description: 'Create a new schedule for an agent',
    usage: 'th schedules:create [agent_name]',
    aliases: ['schedules:new'],
    options: [],
    examples: [
      'th schedules:create',
      'th schedules:create agent.yaml'
    ],
    details: `Creates a new schedule for an agent using either cron format or plain language.
The schedule will be saved to the agent's configuration file and registered with the API.
Schedule times are in UTC.

Example inputs:
- "every day at 9am"
- "0 9 * * *"
- "every Monday at 2pm"
- "twice a day"

Requires authentication with 'th login' before use.`
  },
  'help': {
    description: 'Display help information',
    usage: 'th help [command_name]',
    options: [],
    examples: [
      'th help',
      'th help deploy',
      'th help schedules:create'
    ],
    details: `Shows help information for Toolhouse CLI commands. Without arguments, 
displays a list of all available commands. With a command name, shows detailed help 
for that specific command including usage, options, examples, and additional details.`
  }
};

function helpCommand(program) {
  program
    .command('help [command_name]')
    .description('Display help for specific commands')
    .action((commandName) => {
      try {
        if (!commandName) {
          // Show general help with all available commands
          const generalHelp = Object.entries(commandHelp)
            .map(([cmd, info]) => `${chalk.green(cmd)}\n${info.description}`)
            .join('\n\n');

          console.log(createBox(
            `${chalk.bold('Toolhouse CLI Help')}\n\n` +
            `${generalHelp}\n\n` +
            `For detailed help on specific commands, use:\n` +
            `${chalk.blue('th help <command_name>')}`,
            { borderColor: 'blue' }
          ));
          return;
        }

        // Show detailed help for specific command
        const help = commandHelp[commandName];
        if (!help) {
          console.error(chalk.red(`Error: Command '${commandName}' not found.`));
          process.exit(1);
        }

        const content = [
          `${chalk.bold('Command:')} ${chalk.green(commandName)}`,
          `\n${chalk.bold('Description:')} ${help.description}`,
          `\n${chalk.bold('Usage:')} ${help.usage}`
        ];

        if (help.aliases && help.aliases.length > 0) {
          content.push(`\n${chalk.bold('Aliases:')} ${help.aliases.join(', ')}`);
        }

        if (help.options && help.options.length > 0) {
          content.push(`\n${chalk.bold('Options:')}\n${help.options.join('\n')}`);
        }

        content.push(`\n${chalk.bold('Examples:')}\n${help.examples.map(ex => `  ${ex}`).join('\n')}`);

        if (help.details) {
          content.push(`\n${chalk.bold('Details:')}\n${help.details}`);
        }

        console.log(createBox(content.join(''), { borderColor: 'blue' }));

      } catch (error) {
        console.error(chalk.red(`Error: ${error.message}`));
        process.exit(1);
      }
    });
}

module.exports = helpCommand;