const path = require("path");
const fs = require("fs");
const chalk = require("chalk");
const fetch = require("node-fetch");
const { createSpinner } = require("../utils/spinner");
const { formatSuccessBox, formatErrorBox } = require("../utils/display");
const {
  findYamlFiles,
  parseAgentConfig,
  buildApiPayloadforDeployment,
} = require("../agents");
const { getApiKey } = require("../auth");
const { BASE_URL, AGENTS_URL } = require("../config");
const {
  exitIfNotAuthenticated,
  exitErrorAuthentication,
} = require("../utils/auth-checker");

// Deploy command implementation
function deployCommand(program) {
  program
    .command("deploy [agent_name]")
    .description("Deploy an agent")
    .action(async (agentName) => {
      try {
        exitIfNotAuthenticated();

        const apiKey = getApiKey();
        let filesToDeploy = [];

        // If agent_name is provided, use that specific file
        if (agentName) {
          const filePath = path.join(process.cwd(), `${agentName}`);
          if (!fs.existsSync(filePath)) {
            console.error(
              formatErrorBox(`Pre-deployment Error`, {
                Description: `Agent file '${agentName}' not found.`,
                "Agent Path  (expected)": filePath,
              })
            );
            process.exit(1);
          }
          filesToDeploy.push({ name: agentName, path: filePath });
        } else {
          // Find all YAML files in the current directory
          const yamlFiles = findYamlFiles();

          if (yamlFiles.length === 0) {
            console.error(
              formatErrorBox(`Pre-deployment Error`, {
                Description: `No agent files found in the current directory.`,
              })
            );
            process.exit(1);
          }

          // Add all found YAML files to the list
          filesToDeploy = yamlFiles.map((file) => {
            const name = path.basename(file, path.extname(file));
            return { name, path: path.join(process.cwd(), file) };
          });
        }

        // Deploy each file
        for (const file of filesToDeploy) {
          const spinner = createSpinner(`Deploying agent: ${file.name}`);
          spinner.start();

          try {
            // Parse and validate the agent configuration
            const parseResult = parseAgentConfig(file.path);

            if (!parseResult.isValid) {
              spinner.fail(`Deployment failed`);
              console.error(
                formatErrorBox("Configuration error", {
                  Description: `${parseResult.error}`,
                  "Agent path": file.path,
                })
              );
              continue; // Skip this file but continue with others
            }

            // Build the API payload
            const payload = buildApiPayloadforDeployment(
              parseResult.config,
              file.name
            );
            try {
              const response = await fetch(`${BASE_URL}/v1/agents`, {
                method: "POST",
                headers: {
                  "Content-Type": "application/json",
                  Authorization: `Bearer ${apiKey}`,
                },
                body: JSON.stringify(payload),
              });

              const responseData = await response.json();
              if (response.status === 401) {
                exitErrorAuthentication();
              }
              if (!response.ok) {
                const errorMessage = new Error();
                errorMessage.details = {
                  responseStatus: response.status,
                  responseData: responseData.error,
                };
                throw errorMessage;
              }

              // Create deployment URL
              const deployUrl = `${AGENTS_URL}/${responseData.id}`;

              spinner.succeed(`Deployed agent: ${chalk.green(file.name)}`);

              console.log(
                formatSuccessBox(
                  `Agent ${file.name} deployed successfully`,
                  {
                    URL: deployUrl,
                    Visibility: payload.public ? "Public" : "Private",
                    Region: "us-west-1",
                    Instance: "standard-1x",
                  },
                  {
                    "Run your agent in production":
                      `curl -X POST ${deployUrl}` +
                      (payload.public
                        ? ""
                        : ` -H "Authorization: Bearer ${apiKey}"`),
                  }
                )
              );
            } catch (error) {
              spinner.fail(`Deployment failed`);
              console.error(
                formatErrorBox("Deployment error", {
                  Description: `${error.details.responseStatus}: ${error.details.responseData}`,
                  "Agent path": file.path,
                })
              );
              continue; // Skip this file but continue with others
            }
          } catch (error) {
            spinner.fail(
              `Failed to deploy agent: ${chalk.bold(file.name)}: ${
                error.message
              }`
            );
            // Just warn, don't exit per requirements
            console.warn(
              chalk.red(
                `Error: Deployment failed for ${file.name}, but continuing with other deployments.`
              )
            );
          }
        }
      } catch (error) {
        console.error(
          formatErrorBox("Deployment Error", {
            Description: `${error.message}`,
          })
        );
        process.exit(1);
      }
    });
}

module.exports = deployCommand;
