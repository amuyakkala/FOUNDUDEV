const chalk = require('chalk');
const open = require('open');
const { createSpinner } = require('../utils/spinner');
const { createBox, formatSuccessBox } = require('../utils/display');
const { sleep } = require('../utils/generator');
const { saveAuthToken, saveApiKey } = require('../auth');
const { BASE_URL, TOOLHOUSE_URL } = require('../config');
const { makeApiRequest } = require('../api');

// Login command implementation
function loginCommand(program) {
  program
    .command('login')
    .description('Login to Toolhouse')
    .action(async () => {
      const spinner = createSpinner('Initiating login process');
      spinner.start();
      
      try {
        // Step 1: Call POST /me/cli-auth
        let authResponse;
        try {
          authResponse = await fetch(`${BASE_URL}/me/cli-auth`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' }
          });
          
          if (!authResponse.ok) {
            throw new Error(`Login failed with status: ${authResponse.status}`);
          }
        } catch (error) {
          throw new Error(`Failed to connect to auth server: ${error.message}`);
        }
        
        // Step 2: Get the auth ID from the response
        const authData = await authResponse.json();
        const authId = authData.id;
        
        if (!authId) {
          throw new Error('Invalid auth response from server');
        }
        
        // Step 3: Inform the user and provide the URL
        spinner.info(`Opening browser to complete login...`);
        
        const authUrl = `${TOOLHOUSE_URL}/cli-auth/${authId}`;
        console.log(createBox(
          `${chalk.bold('Login required!')}\n\n` +
          `If your browser doesn't open automatically, please visit:\n` +
          `${chalk.cyan(authUrl)}`,
          { borderColor: 'yellow' }
        ));
        
        // Step 4: Open the browser
        try {
          await open(authUrl);
        } catch (error) {
          spinner.info(`Couldn't open browser automatically. Please visit the URL manually.`);
        }
        
        // Step 5: Poll for login completion
        spinner.text = 'Waiting for login to complete...';
        
        let token = null;
        let attempts = 0;
        const maxAttempts = 60; // 1 minute timeout
        
        while (!token && attempts < maxAttempts) {
          try {
            const pollResponse = await fetch(`${BASE_URL}/me/cli-auth/${authId}`, {
              method: 'GET',
              headers: { 'Content-Type': 'application/json' }
            });
            
            if (pollResponse.ok) {
              const data = await pollResponse.json();
              if (data && data !== null) {
                token = data;
                break;
              }
            }
          } catch (error) {
            // Continue polling on error
          }
          
          attempts++;
          await sleep(1000); // Wait 1 second between polls
        }
        
        if (!token) {
          throw new Error('Login timed out. Please try again.');
        }
        
        // Step 6: Store the token
        saveAuthToken(token);
        
        // Step 7: Request API key
        spinner.text = 'Fetching API key...';
        
        try {
          const apiKeyResponse = await fetch(`${BASE_URL}/me/api-keys/default`, {
            method: 'GET',
            headers: { 
              'Content-Type': 'application/json',
              'Authorization': `Bearer ${token}`
            }
          });
          
          if (!apiKeyResponse.ok) {
            throw new Error(`Failed to fetch API key with status: ${apiKeyResponse.status}`);
          }
          
          const apiKeyData = await apiKeyResponse.json();
          
          if (!apiKeyData.api_key) {
            throw new Error('Invalid API key response from server');
          }
          
          // Save the API key
          saveApiKey(apiKeyData.api_key);
          
        } catch (error) {
          spinner.warn(`Could not fetch API key: ${error.message}`);
          // Continue even if API key fetch fails
        }
        
        // Step 8: Show success message
        spinner.succeed('Login successful!');
        
        console.log(formatSuccessBox('Successfully logged in to Toolhouse!', null, {
          'Create an agent': `th new`,
        }));
                  
      } catch (error) {
        spinner.fail(`Login failed: ${error.message}`);
        process.exit(1);
      }
    });
}

module.exports = loginCommand;