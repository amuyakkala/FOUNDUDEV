const path = require('path');
const fs = require('fs');
const chalk = require('chalk');
const YAML = require('yaml');
const { input } = require('@inquirer/prompts');
const { findYamlFiles } = require('../agents');
const { createBox, formatSuccessBox } = require('../utils/display');
const { getApiKey } = require('../auth');
const { BASE_URL } = require('../config');
const fetch = require('node-fetch');
const cronstrue = require('cronstrue');
const { exitIfNotAuthenticated } = require('../utils/auth-checker');
const { createSpinner } = require("../utils/spinner");

function schedulesCommand(program) {
  // Command to view schedule
  const schedules = program
  .command('schedules')
  .description('Manage agent schedules');

  schedules
    .command('ls [agent_name]')
    .description('View agent schedules')
    .action(async (agentName) => {
      try {
        exitIfNotAuthenticated();
        let filePath;
        
        if (agentName) {
          filePath = path.join(process.cwd(), agentName);
          if (!fs.existsSync(filePath)) {
            console.error(chalk.red(`Error: Agent file '${agentName}' not found.`));
            process.exit(1);
          }
        } else {
          const yamlFiles = findYamlFiles();
          if (yamlFiles.length === 0) {
            console.error(chalk.red('Error: No agent files found in the current directory.'));
            process.exit(1);
          }
          if (yamlFiles.length > 1) {
            console.error(chalk.red('Error: Multiple agent files found. Please specify which file to use.'));
            process.exit(1);
          }
          filePath = path.join(process.cwd(), yamlFiles[0]);
        }

        const fileContent = fs.readFileSync(filePath, 'utf8');
        const config = YAML.parse(fileContent);

        if (!config.schedules) {
          console.log(createBox(
            `${chalk.bold('No schedules')}\n\n` +
            `Use ${chalk.green('th schedules create')} to create a schedule.`,
            { borderColor: 'yellow' }
          ));
          return;
        }
        config.schedules.forEach(schedule => {
          const humanReadable = cronstrue.toString(schedule.expression);
          if (schedule.id && schedule.expression) {
            console.log(createBox(
          `Schedule ID: ${chalk.green(schedule.id)}\n\n` +
          `Cron: ${chalk.green(schedule.expression)}\n` +
          `Runs: ${chalk.blue(humanReadable)}`,
            { borderColor: 'green' }
          ));
        }
        });
      } catch (error) {
        console.error(chalk.red(`Error: ${error.message}`));
        process.exit(1);
      }
    });

  // Command to set schedule
  schedules
    .command('create [agent_name]')
    .aliases(['new'])
    .description('Create agent schedule')
    .action(async (agentName) => {
      try {
        let filePath;
        
        if (agentName) {
          filePath = path.join(process.cwd(), agentName);
          if (!fs.existsSync(filePath)) {
            console.error(chalk.red(`Error: Agent file '${agentName}' not found.`));
            process.exit(1);
          }
        } else {
          const yamlFiles = findYamlFiles();
          if (yamlFiles.length === 0) {
            console.error(chalk.red('Error: No agent files found in the current directory.'));
            process.exit(1);
          }
          if (yamlFiles.length > 1) {
            console.error(chalk.red('Error: Multiple agent files found. Please specify which file to use.'));
            process.exit(1);
          }
          filePath = path.join(process.cwd(), yamlFiles[0]);
        }

        let expression, response;
        const apiKey = getApiKey();
        do {
          expression = await input({
            message: 'Enter schedule (cron format or plain language):',
            required: true,
            validate: input => input.trim().length > 0,
          });

          response = await fetch(
            `${BASE_URL}/v1/schedules/text-to-cron?${new URLSearchParams({ cron: expression })}`,
            {
              headers: {
                'Authorization': `Bearer ${apiKey}`
              }
            }
          );

          if (!response.ok) {
            console.error(chalk.red('Invalid expression. Try a different expression.'));
          }
        } while (!response.ok);

        const { data: cronExpression } = await response.json();
        const fileContent = fs.readFileSync(filePath, 'utf8');
        const config = YAML.parse(fileContent);

        const spinner = createSpinner(`Creating schedule`);
        spinner.start();

        const scheduleResponse = await fetch(`${BASE_URL}/v1/schedules`, {
          method: 'POST',
          headers: {
            'Authorization': `Bearer ${apiKey}`,
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            chat_id: config.id,
            cadence: cronExpression,
            vars: config.vars || {}
          })
        });

        spinner.succeed('Schedule created')

        if (!scheduleResponse.ok) {
          spinner.fail('Failed to set schedule. Please make sure the agent has been deployed first.');
          process.exit(1);
        }

        const scheduleData = await scheduleResponse.json();

        config.schedules = config.schedules || [];
        config.schedules.push({
          expression: cronExpression,
          id: scheduleData.data.id
        });
        
        fs.writeFileSync(filePath, YAML.stringify(config));
        const humanReadable = cronstrue.toString(cronExpression);
        console.log(formatSuccessBox('Schedule created successfully', {
          'Schedule ID': scheduleData.data.id,
          'Cron': cronExpression,
          'Cadence': humanReadable + ` (Schedule Time is in UTC)`
        }));
      } catch (error) {
        console.error(chalk.red(`Error: ${error.message}`));
        process.exit(1);
      }
    });
}

module.exports = schedulesCommand;