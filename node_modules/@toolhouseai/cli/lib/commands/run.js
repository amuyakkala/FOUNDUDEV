const path = require("path");
const fs = require("fs");
const chalk = require("chalk");
const { createSpinner } = require("../utils/spinner");
const { processStream, formatSuccessBox } = require("../utils/display");
const {
  findYamlFiles,
  parseAgentConfig,
  buildApiPayload,
} = require("../agents");
const { getApiKey } = require("../auth");
const { makeStreamRequest } = require("../api");
const { exitIfNotAuthenticated } = require("../utils/auth-checker");
const { formatErrorMessage, formatErrorBox } = require("../utils/display");

// Run command implementation
function runCommand(program) {
  program
    .command("run [agent_name]")
    .description("Run an agent")
    .action(async (agentName) => {
      try {
        exitIfNotAuthenticated();

        const apiKey = getApiKey();
        let filesToRun = [];

        // If agent_name is provided, use that specific file
        if (agentName) {
          const filePath = path.join(process.cwd(), `${agentName}`);
          if (!fs.existsSync(filePath)) {
            console.error(
              formatErrorMessage(`Error: Agent file '${agentName}' not found.`)
            );
            process.exit(1);
          }
          filesToRun.push({ name: agentName, path: filePath });
        } else {
          // Find all YAML files in the current directory
          const yamlFiles = findYamlFiles();

          if (yamlFiles.length === 0) {
            console.error(
              formatErrorMessage(
                "Error: No agent files found in the current directory."
              )
            );
            process.exit(1);
          }

          if (yamlFiles.length > 1) {
            console.error(
              chalk.red(
                "Error: Multiple agent files found in the current directory."
              )
            );
            process.exit(1);
          }

          // Add all found YAML files to the list
          filesToRun = yamlFiles.map((file) => {
            const name = path.basename(file, path.extname(file));
            return { name, path: path.join(process.cwd(), file) };
          });
        }

        // Run each file
        for (const file of filesToRun) {
          const spinner = createSpinner(`Preparing to run agent: ${file.name}`);
          spinner.start();

          try {
            // Parse and validate the agent configuration
            const parseResult = parseAgentConfig(file.path);

            if (!parseResult.isValid) {
              spinner.fail(`Agent Run failed`);
              console.error(
                formatErrorBox("Configuration error", {
                  Description: `${parseResult.error}`,
                  "Full path": file.path,
                })
              );
              continue; // Skip this file but continue with others
            }

            // Build the API payload
            const payload = buildApiPayload(
              parseResult.config,
              file.name,
              apiKey
            );

            spinner.succeed(`Starting agent: ${chalk.green(file.name)}`);

            // Display payload parameters (excluding sensitive data)
            console.log(chalk.dim("\n Agent Parameters:"));
            const { api_key, env, messages, ...displayParams } = payload;
            const params = {
              ...displayParams,
              prompt: messages[0].content,
            };

            // Create a fancy parameter display
            Object.entries(params).forEach(([key, value]) => {
              console.log(
                `${chalk.blue("❯")} ${chalk.cyan(key.padEnd(15))} ${chalk.dim(
                  "→"
                )} ${chalk.yellow(
                  typeof value === "string" ? value : JSON.stringify(value)
                )}`
              );
            });
            console.log(""); // Empty line for better readability

            // Make streaming request
            try {
              const response = await makeStreamRequest(payload);

              // Process the streaming response
              const result = await processStream(response, file.name);

              // Display completion message
              console.log(
                formatSuccessBox(
                  `Agent ${file.name} completed successfully`,
                  null,
                  {
                    "Deploy your agent": `th deploy ${file.name}`,
                  }
                )
              );
            } catch (error) {
              spinner.fail(
                `Failed to run agent ${file.name}: ${error.message}`
              );
            }
          } catch (error) {
            if (spinner)
              spinner.fail(
                `Failed to run agent ${file.name}: ${error.message}`
              );
            else
              console.error(
                formatErrorMessage(
                  `Failed to run agent ${file.name}: ${error.message}`
                )
              );
          }
        }
      } catch (error) {
        console.error(formatErrorMessage(`Error: ${error.message}`));
        process.exit(1);
      }
    });
}

module.exports = runCommand;
