const fs = require('fs');
const path = require('path');
const chalk = require('chalk');
const { input } = require('@inquirer/prompts');
const { createSpinner } = require('../utils/spinner');
const { formatSuccessBox, formatErrorBox } = require('../utils/display');
const { generateRandomName } = require('../utils/generator');
const { RAG_SERVICE_URL } = require('../config');
const { getApiKey } = require('../auth');
const {
  exitIfNotAuthenticated,
  exitErrorAuthentication,
} = require('../utils/auth-checker');
const glob = require('glob');
const FormData = require('form-data');
const fetch = require('node-fetch');
const CommandError = require('../exceptions/command-exception');
const ServerError = require('../exceptions/server-exception');

function getContentType(filePath) {
  const ext = path.extname(filePath).toLowerCase();
  const contentTypes = {
    '.pdf': 'application/pdf',
    '.txt': 'text/plain',
    '.text': 'text/plain',
    '.log': 'text/plain',
    '.ini': 'text/plain',
    '.conf': 'text/plain',
    '.csv': 'text/plain',
    '.asc': 'text/plain',
    '.lst': 'text/plain',
    '.md': 'text/plain',
    '.sh': 'text/plain',
    '.py': 'text/plain',
    '.js': 'text/plain',
    '.css': 'text/plain',
    '.html': 'text/plain',
    '.htm': 'text/plain',
    '.xml': 'text/plain',
    '.json': 'text/plain',
    '.yaml': 'text/plain',
    '.yml': 'text/plain',
  };
  return contentTypes[ext] || 'Unsupported file type';
}

async function handleError(response) {
  const errorText = await response.text();
  try {
    const errorData = JSON.parse(errorText);
    if (response.status >= 400 && response.status < 500) {
      throw new CommandError(String(errorData.error));
    } else if (response.status >= 500) {
      throw new ServerError(String(errorData.error));
    }
  } catch (parseError) {
    throw new CommandError(errorText);
  }
}

function validateBucketName(name) {
  return /^[a-zA-Z0-9_-]+$/.test(name);
}

async function promptForName(initialName) {
  console.log(
    `${chalk.dim('›')} Generated unique name: ${chalk.cyan.bold(
      initialName
    )}\n` +
      `${chalk.dim('│')} ${chalk.dim(
        'Only letters, numbers, and dashes allowed'
      )}\n`
  );

  const customName = await input({
    message: 'Enter a custom name or press Enter to accept',
    default: initialName,
    validate: (value) => {
      const name = value.trim();

      if (!validateBucketName(name)) {
        return formatErrorBox(
          'Invalid name. Only letters, numbers, and dashes allowed'
        );
      }

      if (fs.existsSync(name)) {
        return formatErrorBox(
          `Folder already exists. A folder named '${name}' already exists in this directory.`
        );
      }

      return true;
    },
  });

  return customName.trim();
}

async function promptForConfirmation(folderName) {
  console.log(
    `${chalk.dim(
      '›'
    )} Are you sure you want to delete the folder '${chalk.cyan.bold(
      folderName
    )}'?`
  );

  const confirmation = await input({
    message: 'Enter Y/N to confirm',
    default: 'N',
    validate: (value) => {
      const response = value.trim().toUpperCase();

      if (response !== 'Y' && response !== 'N') {
        return formatErrorBox(
          'Invalid input. Please enter Y for Yes or N for No.'
        );
      }

      return true;
    },
  });

  return confirmation.trim().toUpperCase() === 'Y';
}

async function createRagBucket(folderName) {
  const spinner = createSpinner(chalk.bold('Creating your RAG folder'));
  spinner.start();

  try {
    exitIfNotAuthenticated();
    const apiKey = getApiKey();

    const response = await fetch(`${RAG_SERVICE_URL}/v1/rag`, {
      method: 'POST',
      body: JSON.stringify({ folder_name: folderName }),
      headers: {
        'Content-Type': 'application/json',
        Authorization: `Bearer ${apiKey}`,
      },
    });

    if (response.status === 401) {
      exitErrorAuthentication();
    }

    if (!response.ok) {
      await handleError(response);
    }

    const data = await response.json();

    spinner.succeed(
      chalk.bold(`RAG folder created: ${chalk.green.bold(folderName)}`)
    );
    console.log(
      formatSuccessBox(
        'RAG Folder Created',
        {
          Name: folderName,
        },
        {
          'Add documents': `th rag add ${folderName} <file_or_directory>`,
          'Add to agent': `Add 'rag: "${folderName}"' to your agent file to use this RAG folder`,
        }
      )
    );
  } catch (error) {
    spinner.fail(chalk.bold('Failed to create RAG folder'));
    console.error(
      formatErrorBox('RAG folder creation error', {
        Description: `${error.message}`,
        'Folder name': folderName,
      })
    );
    process.exit(1);
  }
}

async function deleteRagBucket(folderName) {
  const spinner = createSpinner(chalk.bold('Deleting your RAG folder'));
  spinner.start();

  try {
    exitIfNotAuthenticated();
    const apiKey = getApiKey();

    const response = await fetch(`${RAG_SERVICE_URL}/v1/rag/${folderName}`, {
      method: 'DELETE',
      headers: {
        'Content-Type': 'application/json',
        Authorization: `Bearer ${apiKey}`,
      },
    });

    if (response.status === 401) {
      exitErrorAuthentication();
    }

    if (!response.ok) {
      await handleError(response);
    }

    const data = await response.json();

    spinner.succeed(
      chalk.bold(`RAG folder deleted: ${chalk.green.bold(folderName)}`)
    );
    const fileList = data.deletedFiles
      .map((file) => `  • ${chalk.green.bold(file)}`)
      .join('\n');

    console.log(
      formatSuccessBox(
        'RAG Folder Deleted',
        {
          'Deleted files':
            fileList.length > 0
              ? `\n${fileList}\n`
              : 'No files found in this RAG folder',
        },
        {
          'List folders': 'th rag ls',
          'List files': 'th rag ls <folder_name>',
        }
      )
    );
  } catch (error) {
    spinner.fail(chalk.bold('Failed to delete RAG folder'));
    console.error(
      formatErrorBox('RAG folder deletion error', {
        Description: `${error.message}`,
        'Folder name': folderName,
      })
    );
    process.exit(1);
  }
}

function ragCommand(program) {
  const rag = program.command('rag').description('RAG commands');

  rag
    .command('ls [folder_name]')
    .description('List all RAG folders or files within a specific folder')
    .action(async (folderName) => {
      const spinner = createSpinner(
        chalk.bold('Fetching your RAG folder files')
      );
      spinner.start();

      try {
        exitIfNotAuthenticated();
        const apiKey = getApiKey();

        // If folderName is provided, fetch files within that folder
        const endpoint = folderName
          ? `${RAG_SERVICE_URL}/v1/rag/${folderName}`
          : `${RAG_SERVICE_URL}/v1/rag`;

        const response = await fetch(endpoint, {
          method: 'GET',
          headers: {
            'Content-Type': 'application/json',
            Authorization: `Bearer ${apiKey}`,
          },
        });

        if (response.status === 401) {
          exitErrorAuthentication();
        }

        if (response.status === 404) {
          spinner.fail(chalk.bold('RAG folder not found'));
          console.log(
            formatErrorBox('RAG folder not found', {
              Description: `The RAG folder '${folderName}' does not exist.`,
            })
          );
          return;
        }

        if (!response.ok) {
          await handleError(response);
        }

        const data = await response.json();

        if (folderName) {
          // Handle listing files within a folder
          const { files } = data;
          if (!files || files.length === 0) {
            spinner.info(chalk.bold('No files found in this RAG folder'));
            console.log(
              formatSuccessBox('No files found in this RAG folder', null, {
                'Add files': `th rag add ${folderName} <file_or_directory>`,
              })
            );
            return;
          }

          spinner.succeed(chalk.bold('Files fetched successfully'));
          const fileList = files
            .map((file) => `  • ${chalk.green.bold(file)}`)
            .join('\n');
          console.log(
            formatSuccessBox(
              'Files in this RAG folder',
              {
                'Available files': `\n${fileList}\n`,
              },
              {
                'Add documents': `th rag add ${folderName} <file_or_directory>`,
              }
            )
          );
        } else {
          // Handle listing all folders
          const folders = data;
          if (!folders || folders.length === 0) {
            spinner.info(chalk.bold('No RAG folders found'));
            console.log(
              formatSuccessBox('No RAG Folders', null, {
                'Create a folder': 'th rag create',
              })
            );
            return;
          }

          spinner.succeed(chalk.bold('RAG folders fetched successfully'));
          const folderList = folders
            .map((folder) => `  • ${chalk.green.bold(folder)}`)
            .join('\n');
          console.log(
            formatSuccessBox(
              'Your RAG Folders',
              {
                'Available folders': `\n${folderList}\n`,
              },
              {
                'Add documents': 'th rag add <folder_name> <file_or_directory>',
                'Create new folder': 'th rag create',
              }
            )
          );
        }
      } catch (error) {
        spinner.fail(chalk.bold('Failed to fetch RAG  '));
        console.error(
          formatErrorBox('RAG folder files listing error', {
            Description: `${error.message}`,
          })
        );
        process.exit(1);
      }
    });

  rag
    .command('create [folder_name]')
    .description('Create a new RAG folder')
    .action(async (folderName) => {
      try {
        let folderNameToCreate;
        // If bucketName is not provided, generate a random name
        if (!folderName) {
          folderNameToCreate = generateRandomName();
          folderNameToCreate = await promptForName(folderNameToCreate);
        } else {
          folderNameToCreate = folderName;
          if (!validateBucketName(folderNameToCreate)) {
            console.error(
              formatErrorBox(
                'Invalid name. Use only letters, numbers, and dashes.'
              )
            );
            process.exit(1);
          }
        }
        await createRagBucket(folderNameToCreate);
      } catch (error) {
        console.error(
          formatErrorBox(
            `An error occurred while creating the RAG folder: ${error.message}`
          )
        );
        process.exit(1);
      }
    });

  rag
    .command('add <folder_name> [files...]')
    .description('Add files to a RAG folder')
    .action(async (folderName, files) => {
      if (!files || files.length === 0) {
        console.error(
          formatErrorBox('Please specify at least one file to upload')
        );
        process.exit(1);
      }

      const spinner = createSpinner(
        chalk.bold('Uploading files to RAG folder')
      );
      spinner.start();

      try {
        exitIfNotAuthenticated();
        const apiKey = getApiKey();

        // Expand glob patterns
        const expandedFiles = files.flatMap((pattern) => {
          const matches = glob.sync(pattern);
          if (matches.length === 0) {
            console.warn(
              chalk.yellow(
                `Warning: No files found matching pattern: ${pattern}`
              )
            );
          }
          return matches;
        });

        if (expandedFiles.length === 0) {
          spinner.fail(chalk.bold('No valid files found to upload'));
          process.exit(1);
        }

        const unsupportedFiles = expandedFiles.filter((filePath) => {
          const mimeType = getContentType(filePath);
          return mimeType === 'Unsupported file type';
        });

        if (unsupportedFiles.length > 0) {
          console.error(
            formatErrorBox('Unsupported file types detected', {
              'Unsupported files': unsupportedFiles
                .map((file) => path.basename(file))
                .join(', '),
              'Supported types': 'text/plain, application/pdf',
            })
          );
          spinner.fail(
            chalk.bold('Upload aborted due to unsupported file types')
          );
          process.exit(1);
        }

        // Create form data and add files
        const formData = new FormData();
        for (const filePath of expandedFiles) {
          const fileBuffer = fs.readFileSync(filePath);
          formData.append('files[]', fileBuffer, {
            filename: path.basename(filePath),
            contentType: getContentType(filePath),
          });
        }

        try {
          const formHeaders = formData.getHeaders();

          const response = await fetch(
            `${RAG_SERVICE_URL}/v1/rag/${folderName}`,
            {
              method: 'POST',
              body: formData,
              headers: {
                ...formHeaders,
                Authorization: `Bearer ${apiKey}`,
              },
            }
          );

          if (response.status === 401) {
            exitErrorAuthentication();
          }

          if (response.status === 404) {
            spinner.fail(chalk.bold('RAG folder not found'));
            console.log(
              formatErrorBox('RAG folder not found', {
                Description: `The RAG folder '${folderName}' does not exist.`,
              })
            );
            return;
          }

          if (!response.ok) {
            await handleError(response);
          }

          const data = await response.json();

          spinner.succeed(
            chalk.bold(
              `Successfully uploaded ${
                expandedFiles.length
              } file(s) to ${chalk.green.bold(folderName)}`
            )
          );
          console.log(
            formatSuccessBox(
              'Files Uploaded',
              {
                Folder: folderName,
                Files:
                  '\n' +
                  expandedFiles
                    .map((f) => `  • ${path.basename(f)}`)
                    .join('\n'),
              },
              {
                'List folders': 'th rag ls',
                'Add more files': `th rag add ${folderName} <file_or_pattern>`,
              }
            )
          );
        } catch (error) {
          spinner.fail(chalk.bold('Failed to upload files'));
          if (error.response) {
            const errorData = error.response.data;
            if (error.response.status === 401) {
              exitErrorAuthentication();
            }
            console.log(
              formatErrorBox(
                error.message || 'An error occurred while uploading files',
                {
                  'Error Type': error.name || 'Upload Error',
                  Details: error.message || 'No additional details available',
                }
              )
            );
          } else {
            console.log(
              formatErrorBox(error.message || 'An unexpected error occurred', {
                'Error Type': 'Network Error',
                Details: 'Could not connect to the server',
              })
            );
          }
          process.exit(1);
        }
      } catch (error) {
        spinner.fail(chalk.bold('Failed to upload files'));
        console.error(formatErrorBox(error.message));
        process.exit(1);
      }
    });

  rag
    .command('rm [folder_name]')
    .description('Delete a RAG folder')
    .action(async (folderName) => {
      try {
        if (!folderName) {
          console.error(
            formatErrorBox('Please specify the folder name to delete')
          );
          process.exit(1);
        }

        if (!validateBucketName(folderName)) {
          console.error(
            formatErrorBox(
              'Invalid name. Use only letters, numbers, and dashes.'
            )
          );
          process.exit(1);
        }

        const confirmation = await promptForConfirmation(folderName);

        if (!confirmation) {
          console.log(chalk.bold('Folder deletion cancelled.'));
          process.exit(0);
        }

        await deleteRagBucket(folderName);
      } catch (error) {
        console.error(
          formatErrorBox(
            `An error occurred while deleting the RAG folder: ${error.message}`
          )
        );
        process.exit(1);
      }
    });
}

module.exports = ragCommand;
