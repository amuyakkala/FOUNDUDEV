const fetch = require('node-fetch');
const { BASE_URL, GENERATION_SERVICE_URL } = require('./config');
const { getAuthToken } = require('./auth');
const CommandError = require('./exceptions/command-exception');
const ServerError = require('./exceptions/server-exception');

// Function to make API requests
async function makeApiRequest(endpoint, method = 'GET', data = null, auth = true) {
  const url = `${BASE_URL}${endpoint}`;
  const headers = {
    'Content-Type': 'application/json'
  };
  
  // Add authorization header if required
  if (auth) {
    const token = getAuthToken();
    if (token) {
      headers['Authorization'] = `Bearer ${token}`;
    }
  }
  
  const options = {
    method,
    headers
  };
  
  // Add body data for POST, PUT, PATCH
  if (['POST', 'PUT', 'PATCH'].includes(method) && data) {
    options.body = JSON.stringify(data);
  }
  
  const response = await fetch(url, options);
  
  // Check for error
  if (!response.ok) {
    // Try to parse error message from response
    try {
      const errorData = await response.json();
      throw new Error(errorData.message || `HTTP error! status: ${response.status}`);
    } catch (e) {
      // If parsing fails, use generic error
      throw new Error(`API request failed with status: ${response.status}`);
    }
  }
  
  // Return response as JSON if it has content
  const contentType = response.headers.get('content-type');
  if (contentType && contentType.includes('application/json')) {
    return await response.json();
  }
  
  return response;
}

// Function to make streaming API requests
async function makeStreamRequest(payload) {
  const url = `${GENERATION_SERVICE_URL}/gen/stream`;
  const options = {
    method: 'POST',
    headers: { 
      'Content-Type': 'application/json',
      'Accept': 'text/event-stream'
    },
    body: JSON.stringify(payload)
  };
  
  const response = await fetch(url, options);
  if (!response.ok) {
    const errorMessage = await response.text();        
    if (response.status >= 400 && response.status < 500) {
      try {
        const errorData = JSON.parse(errorMessage);
        throw new CommandError(errorData.message || 'Invalid request');
      } catch (e) {
        throw new CommandError(errorMessage || 'Invalid request');
      }
    } else if (response.status >= 500) {
      try {
        const errorData = JSON.parse(errorMessage);
        throw new ServerError(errorData.message || `Unexpected server status error ${response.status}`);
      } catch (e) {
        throw new ServerError(errorMessage || `Unexpected server status error ${response.status}`);
      }
    }
  }
  
  return response;
}

module.exports = {
  makeApiRequest,
  makeStreamRequest
};