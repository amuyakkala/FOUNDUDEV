
const fs = require("fs");
const path = require("path");
const yaml = require("js-yaml");
const glob = require("glob");
const { ENVIRONMENT, AGENT_MODEL } = require("./config");
const { generateUUID } = require("./utils/generator");

// Find all YAML files in the current directory
function findYamlFiles() {
  try {
    const files = glob.sync("*.{yaml,yml}", { cwd: process.cwd() });
    return files;
  } catch (error) {
    // Fallback to fs.readdirSync if glob fails
    return fs
      .readdirSync(process.cwd())
      .filter((file) => file.endsWith(".yaml") || file.endsWith(".yml"));
  }
}

// Parse and validate the agent configuration YAML file
function parseAgentConfig(filePath) {
  try {
    // Read and parse the file
    const fileContent = fs.readFileSync(filePath, "utf8");
    const config = yaml.load(fileContent) || {};

    // Check required fields
    if (!config.id) {
      // Generate a GUID
      config.id = generateUUID();
      // Save the updated config back to the file
      const updatedYaml = yaml.dump(config);
      fs.writeFileSync(filePath, updatedYaml, 'utf8');
    }

    if (!config.prompt) {
      throw new Error("Missing required field: prompt");
    }

    if (!config.title) {
      throw new Error("Missing required field: title");
    }

    // Extract variables from prompt
    const promptVarRegex = /\{([a-zA-Z0-9_]+)\}/g;
    const promptVars = [];
    let match;

    while ((match = promptVarRegex.exec(config.prompt)) !== null) {
      promptVars.push(match[1]);
    }

    // Validate variables section if variables were found in the prompt
    if (promptVars.length > 0) {
      if (!config.vars || typeof config.vars !== "object") {
        throw new Error(
          "Variables found in prompt, but vars section is missing or invalid"
        );
      }

      // Check that all prompt variables are defined in vars section
      const missingVars = promptVars.filter(
        (varName) => !(varName in config.vars)
      );

      if (missingVars.length > 0) {
        throw new Error(
          `Missing variable definitions in vars section: ${missingVars.join(
            ", "
          )}`
        );
      }
    }

    // Set default values for optional fields
    if (!config.bundle) config.bundle = "default";
    if (!config.toolhouse_id) config.toolhouse_id = "default";

    return {
      isValid: true,
      config: config,
      variables: promptVars,
    };
  } catch (error) {
    return {
      isValid: false,
      error: error.message,
    };
  }
}

// Replace variables in the prompt with their values
function replaceVars(prompt, vars) {
  return prompt.replace(/\{([a-zA-Z0-9_]+)\}/g, (match, varName) => {
    if (vars && vars[varName]) {
      return vars[varName];
    }
    throw new Error(`Variable ${varName} not defined`);
  });
}

// Build the payload for API requests
function buildApiPayload(config, agentName, apiKey) {
  // Create a payload object with all fields from the config
  const prompt = replaceVars(config.prompt, config.vars);
  const payload = {
    api_key: apiKey,
    messages: [{ role: "user", content: prompt }],
    bundle: config.bundle,
    toolhouse_id: config.toolhouse_id,
    agent_id: config.id,
    env: ENVIRONMENT,
    model: config.model || AGENT_MODEL,
    debug: config.debug || false,
  };

  // Add system_prompt if present
  if (config.system_prompt) {
    payload.system_prompt = config.system_prompt;
  }

  if (config.rag) {
    payload.rag = config.rag;
  }
  return payload;
}

// Build the payload for deployment requests
function buildApiPayloadforDeployment(config) {
  const payload = {
    id: config.id,
    title: config.title,
    prompt: config.prompt,
    vars: config.vars,
    bundle: config.bundle,
    public: config.public || false,
    toolhouse_id: config.toolhouse_id,
    rag: null,
  };

  // Add system_prompt if present
  if (config.system_prompt) {
    payload.system_prompt = config.system_prompt;
  }
  if (config.rag) {
    payload.rag = config.rag;
  }

  return payload;
}

module.exports = {
  findYamlFiles,
  parseAgentConfig,
  replaceVars,
  buildApiPayload,
  buildApiPayloadforDeployment,
};
