const os = require('os');
const path = require('path');
const fs = require('fs');

// API Configuration
const BASE_URL = process.env.TOOLHOUSE_API_URL || 'https://api.toolhouse.ai';
const GENERATION_SERVICE_URL =
  process.env.TOOLHOUSE_GENERATION_SERVICE_URL || 'https://api.toolhouse.ai';
const TOOLHOUSE_URL = process.env.TOOLHOUSE_URL || 'https://app.toolhouse.ai';
const AGENTS_URL =
  process.env.TOOLHOUSE_AGENTS_URL || 'https://agents.toolhouse.ai';
const ENVIRONMENT = process.env.TOOLHOUSE_ENV || 'production';
const AGENT_MODEL = process.env.TOOLHOUSE_AGENT_MODEL || 'gpt-4o-mini';
const RAG_SERVICE_URL =
  process.env.TOOLHOUSE_RAG_SERVICE_URL || 'https://rag-api.toolhouse.ai';

// Get the path to the auth config file
function getAuthConfigPath() {
  return path.join(os.homedir(), '.toolhouse');
}

// Read auth configuration from config file
function getAuthConfig() {
  const configPath = getAuthConfigPath();

  if (fs.existsSync(configPath)) {
    try {
      const data = fs.readFileSync(configPath, 'utf8');
      const config = {};

      // Parse NAME=VALUE format
      data.split('\n').forEach((line) => {
        const [key, value] = line.split('=');
        if (key && value) {
          config[key.trim()] = value.trim();
        }
      });

      return config;
    } catch (error) {
      return {};
    }
  }

  return {};
}

// Write values to config file in NAME=VALUE format
function saveToConfig(values) {
  const configPath = getAuthConfigPath();

  // Read existing config if it exists
  let config = {};
  if (fs.existsSync(configPath)) {
    try {
      const data = fs.readFileSync(configPath, 'utf8');
      data.split('\n').forEach((line) => {
        const [key, value] = line.split('=');
        if (key && value) {
          config[key.trim()] = value.trim();
        }
      });
    } catch (error) {
      // If we can't read it, we'll just overwrite it
    }
  }

  // Update with new values
  config = { ...config, ...values };

  // Convert to NAME=VALUE format
  const content = Object.entries(config)
    .map(([key, value]) => `${key}=${value}`)
    .join('\n');

  fs.writeFileSync(configPath, content);
}

module.exports = {
  BASE_URL,
  GENERATION_SERVICE_URL,
  TOOLHOUSE_URL,
  AGENTS_URL,
  ENVIRONMENT,
  AGENT_MODEL,
  RAG_SERVICE_URL,
  getAuthConfig,
  getAuthConfigPath,
  saveToConfig,
};
